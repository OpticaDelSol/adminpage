<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Proveedor extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Proveedor_model');
    } 
    
    function validar_cuit($cuit)
    {
        $cuit_exists = $this->Proveedor_model->cuit_exists($cuit);
        header('Content-Type: application/json');
        if($cuit_exists)
        {
            die( json_encode(array('status' => 'success', 'codigo' => 'error','mensaje' => 'CUIT ya existente')) );
        }
        else
        {
            die( json_encode(array('status' => 'success', 'codigo' => 'ok','mensaje' => 'ok')));
        }
        
    }
    
    function seleccion_proveedor($referer)
    {
        $data['proveedores'] = $this->Proveedor_model->get_all_proveedor();
        $data['referer'] = $referer;
        $data['_view'] = 'proveedor/_seleccionar';
        $data['js_to_load'] = '_seleccionar_proveedor.js';
        $this->load->view('layouts/main',$data);
    }
    
    /*
     * details
     */
    
    function details($id)
    {
        // check if the proveedor exists before trying to edit it
        $data['proveedor'] = $this->Proveedor_model->get_proveedor($id);
        
        if(isset($data['proveedor']['id']))
        {
                $this->load->model('Proveedor_cuentum_model');
                $data['operaciones_factura'] = $this->Proveedor_cuentum_model->ObtenerOperaciones('FACTURA',$id);
                $data['operaciones_remito'] = $this->Proveedor_cuentum_model->ObtenerOperaciones('REMITO',$id);
                $data['operaciones_gral'] = $this->Proveedor_cuentum_model->ObtenerOperaciones_total($id);
            
            
                $this->load->model('Localidad_model');
                $data['all_localidad'] = $this->Localidad_model->get_all_localidad();
                $data['js_to_load'] =['ficha_proveedor.js'];
                $data['_view'] = 'proveedor/details';
                $this->load->view('layouts/main',$data);
        }
    }

    /*
     * Listing of proveedor
     */
    function index()
    {
        $this->load->model('Localidad_model');
        $data['localidades'] = $this->Localidad_model->get_all_localidad();
        $data['proveedor'] = $this->Proveedor_model->get_all_proveedor();
        $data['js_to_load'] = 'proveedores_listado.js';
        $data['_view'] = 'proveedor/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new proveedor
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('cuit','Cuit','required');
		$this->form_validation->set_rules('nombre','Nombre','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'localidad_id' => $this->input->post('localidad_id'),
				'cuit' => $this->input->post('cuit'),
				'nombre' => $this->input->post('nombre'),
				'direccion' => $this->input->post('direccion'),
				'telefono1' => $this->input->post('telefono1'),
				'telefono2' => $this->input->post('telefono2'),
            );
            
            $proveedor_id = $this->Proveedor_model->add_proveedor($params);
            redirect('proveedor/index');
        }
        else
        {
			$this->load->model('Localidad_model');
			$data['all_localidad'] = $this->Localidad_model->get_all_localidad();
            
            $data['_view'] = 'proveedor/add';
            $data['js_to_load'] = ['modal.js','nuevo_proveedor.js'];
            $this->load->view('layouts/main',$data);
            
        }
    }  

    /*
     * Editing a proveedor
     */
    function edit($id)
    {   
        // check if the proveedor exists before trying to edit it
        $data['proveedor'] = $this->Proveedor_model->get_proveedor($id);
        
        if(isset($data['proveedor']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('cuit','Cuit','required');
			$this->form_validation->set_rules('nombre','Nombre','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'localidad_id' => $this->input->post('localidad_id'),
					'cuit' => $this->input->post('cuit'),
					'nombre' => $this->input->post('nombre'),
					'direccion' => $this->input->post('direccion'),
					'telefono1' => $this->input->post('telefono1'),
					'telefono2' => $this->input->post('telefono2'),
                );

                $this->Proveedor_model->update_proveedor($id,$params);            
                redirect('proveedor/index');
            }
            else
            {
				$this->load->model('Localidad_model');
				$data['all_localidad'] = $this->Localidad_model->get_all_localidad();

                $data['_view'] = 'proveedor/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The proveedor you are trying to edit does not exist.');
    } 

    /*
     * Deleting proveedor
     */
    function remove($id)
    {
        $proveedor = $this->Proveedor_model->get_proveedor($id);

        // check if the proveedor exists before trying to delete it
        if(isset($proveedor['id']))
        {
            $this->Proveedor_model->delete_proveedor($id);
            redirect('proveedor/index');
        }
        else
            show_error('The proveedor you are trying to delete does not exist.');
    }
    
}
