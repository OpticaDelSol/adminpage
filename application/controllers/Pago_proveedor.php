<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Pago_proveedor extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Pago_proveedor_model');
        $this->load->model('Proveedor_model');
        $this->load->model('Historial_accion_model');
    } 
    
    function listado_proveedor($idProveedor)
    {
        $data['js_to_load'] = ['listado_pago_proveedor.js'];
        $data['_view'] = 'pago_proveedor/listado_proveedor';
        $data['proveedor'] = $this->Proveedor_model->get_proveedor($idProveedor);
        $data['pagos'] = $this->Pago_proveedor_model->lista_pagos_proveedor($idProveedor);
        $this->load->view('layouts/main',$data);
        
    }
    function listado()
    {
        $data['pagos_proveedor'] = $this->Pago_proveedor_model->get_pagos_proveedor_gral();
        $data['proveedores'] = $this->Proveedor_model->get_all_proveedor();
        $data['_view'] = 'pago_proveedor/listado';
        $this->load->view('layouts/main',$data);
    }
    
    function add_pagoFactura($idProveedor)
    {
        $this->load->model('Proveedor_cuentum_model');
        $this->load->model('Documento_iva_model');
        $this->load->helper('date_helper');
        $this->load->library('session');
        
        $rows_ids = $this->Proveedor_cuentum_model->ObtenerCuenta('FACTURA',$idProveedor);
        $id_proveedor_cuenta = $rows_ids['id'];
        $data['id_proveedor']=$idProveedor;
        $data['proveedor'] = $this->Proveedor_model->get_proveedor($idProveedor);
        if(null == $id_proveedor_cuenta)
        {
            $id_proveedor_cuenta = $this->Proveedor_cuentum_model->CrearCuenta('FACTURA',$idProveedor);
        }

        $this->load->library('form_validation');

        $this->form_validation->set_rules('monto','Monto','required');
        $this->form_validation->set_rules('fecha','fecha','required');
		
        if($this->form_validation->run())     
        {   
            $params = array(
				'proveedor_cuenta_id' => $id_proveedor_cuenta,
				'monto' => $this->input->post('monto'),
				'comentarios' => $this->input->post('comentarios'),
                                'fecha' => parse_date($this->input->post('fecha')),
                                'fkProveedor' => $idProveedor
            );
            
            $pago_proveedor_id = $this->Pago_proveedor_model->add_pago_proveedor($params);
            
            //MODOS DE PAGO
            $modos_pago = $this->input->post('fkModoPago');
            $modos_pago_monto = $this->input->post('modo_monto');
            
            for($i=0;$i<sizeof($modos_pago);$i++)
            {
                $_params = array(
                    'fkModoPago'=>$modos_pago[$i],
                    'monto'=>$modos_pago_monto[$i],
                    'fkPago'=>$pago_proveedor_id
                );
                $this->Pago_proveedor_model->add_modo_pago($_params);
            }
            
            $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'PAGO_FACTURA_ADD',
                    '-',
                    $pago_proveedor_id
                    );
                //redirect('documento/index');
            
            redirect('proveedor/details/'.$idProveedor);
        }
        else
        {
            
            
            $data['_view'] = 'pago_proveedor/add_pagoFactura';
            $data['js_to_load'] = 'pago_proveedor_add.js';
            $this->load->view('layouts/main',$data);
        }
    }
    
    function add_pagoRemito($idProveedor)
    {
        $this->load->model('Proveedor_cuentum_model');
        $this->load->model('Documento_iva_model');
        $this->load->helper('date_helper');
        $this->load->library('session');
        
        $rows_ids = $this->Proveedor_cuentum_model->ObtenerCuenta('REMITO',$idProveedor);
        $id_proveedor_cuenta = $rows_ids['id'];
        $data['id_proveedor']=$idProveedor;
        $data['proveedor'] = $this->Proveedor_model->get_proveedor($idProveedor);
        if(null == $id_proveedor_cuenta)
        {
            $id_proveedor_cuenta = $this->Proveedor_cuentum_model->CrearCuenta('REMITO',$idProveedor);
        }

        $this->load->library('form_validation');

        $this->form_validation->set_rules('monto','Monto','required');
        $this->form_validation->set_rules('fecha','fecha','required');
		
        if($this->form_validation->run())     
        {   
            $params = array(
				'proveedor_cuenta_id' => $id_proveedor_cuenta,
				'monto' => $this->input->post('monto'),
				'comentarios' => $this->input->post('comentarios'),
                                'fecha' => parse_date($this->input->post('fecha')),
                                'fkProveedor' => $idProveedor
            );
            
            $pago_proveedor_id = $this->Pago_proveedor_model->add_pago_proveedor($params);
            
            //MODOS DE PAGO
            $modos_pago = $this->input->post('fkModoPago');
            $modos_pago_monto = $this->input->post('modo_monto');
            
            for($i=0;$i<sizeof($modos_pago);$i++)
            {
                $_params = array(
                    'fkModoPago'=>$modos_pago[$i],
                    'monto'=>$modos_pago_monto[$i],
                    'fkPago'=>$pago_proveedor_id
                );
                $this->Pago_proveedor_model->add_modo_pago($_params);
            }
            
            $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'PAGO_REMITO_ADD',
                    '-',
                    $pago_proveedor_id
                    );
               redirect('proveedor/details/'.$idProveedor);
        }
        else
        {
            
            
            $data['_view'] = 'pago_proveedor/add_pagoRemito';
            $data['js_to_load'] = 'pago_proveedor_add.js';
            $this->load->view('layouts/main',$data);
        }
    }
    
    function agregar($idCuentaProveedor)
    {
        $this->load->library('form_validation');
        $this->load->library('session');
        $this->form_validation->set_rules('monto','Monto','required');
		
        if($this->form_validation->run())     
        {   
            $params = array(
				'proveedor_cuenta_id' => $idCuentaProveedor,
				'monto' => $this->input->post('monto'),
				
				'comentarios' => $this->input->post('comentarios'),
            );
            
            $pago_proveedor_id = $this->Pago_proveedor_model->add_pago_proveedor($params);
            redirect('pago_proveedor/index');
        }
        else
        {
            
            
            $data['_view'] = 'pago_proveedor/add';
            $this->load->view('layouts/main',$data);
        }
    }

    /*
     * Listing of pagos_proveedor
     */
    function index()
    {
        $data['pagos_proveedor'] = $this->Pago_proveedor_model->get_all_pagos_proveedor();
        
        $data['_view'] = 'pago_proveedor/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new pago_proveedor
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('monto','Monto','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'proveedor_cuenta_id' => $this->input->post('proveedor_cuenta_id'),
				'monto' => $this->input->post('monto'),
				'fecha_alta' => $this->input->post('fecha_alta'),
				'comentarios' => $this->input->post('comentarios'),
            );
            
            $pago_proveedor_id = $this->Pago_proveedor_model->add_pago_proveedor($params);
            redirect('pago_proveedor/index');
        }
        else
        {
			$this->load->model('Proveedor_cuentum_model');
			$data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();
            
            $data['_view'] = 'pago_proveedor/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a pago_proveedor
     */
    function edit($id)
    {   
        // check if the pago_proveedor exists before trying to edit it
        $data['pago_proveedor'] = $this->Pago_proveedor_model->get_pago_proveedor($id);
        
        if(isset($data['pago_proveedor']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('monto','Monto','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'proveedor_cuenta_id' => $this->input->post('proveedor_cuenta_id'),
					'monto' => $this->input->post('monto'),
					'fecha_alta' => $this->input->post('fecha_alta'),
					'comentarios' => $this->input->post('comentarios'),
                );

                $this->Pago_proveedor_model->update_pago_proveedor($id,$params);            
                redirect('dashboard/');
            }
            else
            {
				$this->load->model('Proveedor_cuentum_model');
				$data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();

                $data['_view'] = 'pago_proveedor/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The pago_proveedor you are trying to edit does not exist.');
    } 

    /*
     * Deleting pago_proveedor
     */
    function remove($id)
    {
        $pago_proveedor = $this->Pago_proveedor_model->get_pago_proveedor($id);

        // check if the pago_proveedor exists before trying to delete it
        if(isset($pago_proveedor['id']))
        {
            $this->Pago_proveedor_model->delete_pago_proveedor($id);
            redirect('pago_proveedor/index');
        }
        else
            show_error('The pago_proveedor you are trying to delete does not exist.');
    }
    
       /*
     * Edicion a pago_proveedor
     */
    function edicion($id)
    {   
        // check if the pago_proveedor exists before trying to edit it
        $data['pago_proveedor'] = $this->Pago_proveedor_model->get_pago_proveedor($id);
        
        $this->load->library('session');
        
        if (isset($data['pago_proveedor']['id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('monto', 'Monto', 'required');

            if ($this->form_validation->run()) {
                $params = array(
                    'monto' => $this->input->post('monto'),
                    'comentarios' => $this->input->post('comentarios'),
                );

                $this->Pago_proveedor_model->update_pago_proveedor($id, $params);
                
                //MODOS DE PAGO
                
                $this->Pago_proveedor_model->eliminar_modos_pago($id);
                $modos_pago = $this->input->post('fkModoPago');
                $modos_pago_monto = $this->input->post('modo_monto');

                for($i=0;$i<sizeof($modos_pago);$i++)
                {
                    $_params = array(
                        'fkModoPago'=>$modos_pago[$i],
                        'monto'=>$modos_pago_monto[$i],
                        'fkPago'=>$id
                    );
                    $this->Pago_proveedor_model->add_modo_pago($_params);
                }
                
                
                
                redirect('/dashboard');
            } else {
                $this->load->model('Proveedor_cuentum_model');
                $data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();
                $data['modospago'] = $this->Pago_proveedor_model->obtener_modos_pago($id);
                $data['js_to_load'] = 'pago_proveedor_add.js';
                $data['_view'] = 'pago_proveedor/edicion';
                $this->load->view('layouts/main', $data);
            }
        } else {
            show_error('The pago_proveedor you are trying to edit does not exist.');
        }
    } 
    
}
