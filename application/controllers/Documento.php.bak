<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Documento extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Documento_model');
        //$this->output->enable_profiler(TRUE);
        $this->load->model('Proveedor_model');
        $this->load->model('Historial_accion_model');
    } 
    
    function carga_monto_inicial(){
        
        $this->load->library('form_validation');

        $this->form_validation->set_rules('debe','debe','required');
        $this->form_validation->set_rules('haber','haber','required');

        if($this->form_validation->run())     
        {   
            $params = array(
				'debe' => $this->input->post('debe'),
                                'haber' => $this->input->post('haber'),
				'fk_proveedor' => $this->input->post('fk_proveedor'),
        );
            $this->Documento_model->add_documento($params);
            redirect('documento/index');
        }
        else
        {
            $data['_view'] = 'documento/carga_inicial';
            $this->load->view("layouts/main",$data);
        }
        $data['_view'] = 'documento/carga_inicial';
            $this->load->view("layouts/main",$data);
        
    }


    function restaurar($idDocumento)
    {
        $params = array(
                'anulado' => 0,
            );
        
        $this->Documento_model->update_documento($idDocumento,$params);
        $this->Historial_accion_model->registrar_evento(
        $this->session->userdata('id_usuario'),
        'DOCUMENTO_RESTAURAR',
        '-',
        $idDocumento
        );
        redirect('documento/documento_ventas_detalle/'.$idDocumento);
    }
    function anular($idDocumento,$ref)
    {
        $params = array(
                'anulado' => 1,
            );
        
        $this->Documento_model->update_documento($idDocumento,$params);
        $this->Historial_accion_model->registrar_evento(
        $this->session->userdata('id_usuario'),
        'DOCUMENTO_ANULAR',
        '-',
        $idDocumento
        );
        
        redirect('documento/documento_ventas_detalle/'.$idDocumento);
    }
    function anular_factura_c($idDocumento)
    {
        $params = array(
                'anulado' => 1,
            );
        
        $this->Documento_model->update_documento($idDocumento,$params);
        $this->Historial_accion_model->registrar_evento(
        $this->session->userdata('id_usuario'),
        'FACTURA_C_ANULAR',
        '-',
        $idDocumento
        );
        redirect('documento/detalle_factura/'.$idDocumento);
    }
    function anular_remito_c($idDocumento)
    {
        $params = array(
                'anulado' => 1,
            );
        
        $this->Documento_model->update_documento($idDocumento,$params);
                    $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'REMITO_C_ANULAR',
                    '-',
                    $idDocumento
                    );
        redirect('documento/detalle_remito/'.$idDocumento);
    }
    function restaurar_factura_c($idDocumento)
    {
        $params = array(
                'anulado' => 0,
            );
        
        $this->Documento_model->update_documento($idDocumento,$params);
                    $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'FACTURA_C_RESTAURAR',
                    '-',
                    $idDocumento
                    );
        redirect('documento/detalle_factura/'.$idDocumento);
    }
    function restaurar_remito_c($idDocumento)
    {
        $params = array(
                'anulado' => 0,
            );
        
        $this->Documento_model->update_documento($idDocumento,$params);
                    $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'REMITO_C_RESTAURAR',
                    '-',
                    $idDocumento
                    );
        redirect('documento/detalle_remito/'.$idDocumento);
    }
    
    function sel_date_iva_v()
    {
        $data['_view'] = 'informes/seleccion_periodo_informe_venta';
        $data['js_to_load'] = ['seleccionar_periodo_iva_v.js'];
        $this->load->view("layouts/main",$data);
    }
    
    function informe_iva_ventas($mes,$anio)
    {
        $data['documentos'] = $this->Documento_model->obtener_informe_iva_ventas($mes,$anio);
        $data['_view'] = 'informes/informe_iva_ventas';
        $data['js_to_load'] = ['table2csv.min.js','informe_iva_c.js','jquery.tableToExcel.js'];
        $this->load->view("layouts/main",$data);
    }
    
    
    function informe_iva_compras($dia,$mes,$anio,$diah,$mesh,$anioh)
    {
        $data['facturas'] = $this->Documento_model->obtener_informe_iva($dia,$mes,$anio,$diah,$mesh,$anioh);
        $data['js_to_load'] = ['table2csv.min.js','informe_iva_c.js','jquery.tableToExcel.js'];
        $data['_view'] = 'informes/informe_iva_compras';
        $this->load->view("layouts/main",$data);
    }
    function informe_iva_compras_p($mes,$anio)
    {
        $data['facturas'] = $this->Documento_model->obtener_informe_iva_periodo($mes,$anio);
        $data['js_to_load'] = ['table2csv.min.js','informe_iva_c.js','jquery.tableToExcel.js'];
        $data['_view'] = 'informes/informe_iva_compras';
        $this->load->view("layouts/main",$data);
    }
    
    function listado_documentos_ventas($tipo)
    {
        $data['tipo_documento'] = $tipo;
        $this->load->helper('date_helper');
        $data["documentos"] = $this->Documento_model->documento_venta_listado($tipo);
        $data["_view"] = "documento/documento_ventas_listado";
        $this->load->view("layouts/main",$data);
    }
    
    function documento_ventas_detalle($idDocumento)
    {
        $data['idDocumento'] = $idDocumento;
        $data['documento'] = $this->Documento_model->obtener_documento_venta($idDocumento);
        $data['_view'] = 'documento/documento_ventas_detalle';
        $this->load->view("layouts/main",$data);
    }
    
    function documento_ventas_add($tipo)
    {
        
        $data['tipo_documento'] = $tipo;
        $data['js_to_load'] = ['documento_ventas_add.js','modal.js'];
        $this->load->model('Documento_iva_model');
        $this->load->model('Documento_percepcion_model');
        $this->load->model('Sucursal_model');
        $this->load->helper('date_helper');
        $this->load->library('form_validation');
        
        $this->form_validation->set_rules('_fecha','_fecha','required');
        $this->form_validation->set_rules('punto_venta','punto_venta','required');
        
        if(
                $this->form_validation->run()
                )
        {
            $params = array(
                'tipo' => $tipo,
                'codigo' => $this->input->post('_nro'),
                'monto_neto' => $this->input->post('_valor_bruto'),
                'monto_total' => $this->input->post('_valor_total'),
                'pto_vta' => $this->input->post('_pto_vta'),
                'fecha_carga' => parse_date($this->input->post('_fecha')),
                'fkUsuario' => $this->session->userdata('id_usuario')
            );
            
            $id_documento = $this->Documento_model->add_documento($params);
            
            //crear documento_ventas
            
            $_params = array(
                'fk_documento' => $id_documento,
                'tipo_comprobante' =>  ($tipo != 'T')? $this->input->post('_tipo_comprobante') : "-",
                'fk_sucursal' => $this->input->post('punto_venta'),
                'razon_social_nombre' => $this->input->post('_razon_social'),
                'cuit_dni' => $this->input->post('_cuit_dni')
                );
            $this->Documento_model->add_documento_venta($_params);
            
            //iva
            $__params = array(
                'documento_id'=>$id_documento,
                'monto'=>$this->input->post('_iva'),
                'porcentaje'=>'21'
                );
            $this->Documento_iva_model->add_documento_iva($__params);
            
            
            $this->Historial_accion_model->registrar_evento(
            $this->session->userdata('id_usuario'),
            'VENTAS_'.$tipo.'_ADD',
            '-',
            $id_documento
            );
            
            redirect('documento/listado_documentos_ventas/'.$tipo);
        }
        else
        {
            $data['sucursales'] = $this->Sucursal_model->get_sucursales();
            $data['_view'] = 'documento/documento_ventas_add';
            //$data['js_to_load'] = ['modal.js','factura_add.js'];
            $this->load->view('layouts/main',$data);
        }
        
    }
    function documento_ventas_edit($id)
    {

        $this->load->model('Documento_iva_model');
        $this->load->model('Documento_percepcion_model');
        $this->load->model('Sucursal_model');
        $this->load->helper('date_helper');
        $this->load->library('form_validation');
        
        $this->Documento_model->eliminarIVAS($id);
        
        $data['documento'] = $this->Documento_model->obtener_documento_venta($id);
        //$data['dto_vta'] = $this->Documento_model->obtener_dtovta($id);
        $tipo = $data['documento']['tipo'];
        $data['tipo_documento'] = $tipo;
        $data['idDocumento'] = $id;
        $data['js_to_load'] = ['documento_ventas_add.js','modal.js'];
        
        $this->form_validation->set_rules('_fecha','_fecha','required');
        
        if($this->form_validation->run())
        {
            $params = array(
                'tipo' => $tipo,
                'codigo' => $this->input->post('_nro'),
                'monto_neto' => $this->input->post('_valor_bruto'),
                'monto_total' => $this->input->post('_valor_total'),
                'pto_vta' => $this->input->post('_pto_vta'),
                'fecha_carga' => parse_date($this->input->post('_fecha'))
            );
            
           $this->Documento_model->update_documento($data['documento']['dto_id'],$params);
            
            //crear documento_ventas
            
            $_params = array(
                'fk_documento' => $data['documento']['dto_id'],
                'tipo_comprobante' =>  ($tipo != 'T')? $this->input->post('_tipo_comprobante') : "-",
                'fk_sucursal' => $this->input->post('punto_venta'),
                'razon_social_nombre' => $this->input->post('_razon_social'),
                'cuit_dni' => $this->input->post('_cuit_dni')
                );
            $this->Documento_model->update_documento_ventas($data['documento']['id_dv'],$_params);
            
            //iva
            $__params = array(
                'documento_id'=>$id,
                'monto'=>$this->input->post('_iva'),
                'porcentaje'=>'21'
                );
            $this->Documento_iva_model->add_documento_iva($__params);
            
            redirect('documento/listado_documentos_ventas/'.$tipo);
        }
        else
        {
            $data['ivas'] = $this->Documento_model->obtenerMontosIVA($id);
            $data['sucursales'] = $this->Sucursal_model->get_sucursales();
            $data['_view'] = 'documento/documento_ventas_edicion';
            $this->load->view('layouts/main',$data);
        }
        
    }
    
    
    function detalle_remito($idDocumento)
    {
        $data['documento'] = $this->Documento_model->get_documento($idDocumento);
        $data['_view'] = 'documento/remito_detalle';
        $data['js_to_load'] = 'modal.js';
        $this->load->view('layouts/main',$data);
    }


    function detalle_factura($id)
    {
        $this->load->model('Documento_percepcion_model');
        $this->load->model('Documento_iva_model');
        $data['ivas'] = $this->Documento_model->obtenerMontosIVA($id);
        $data['percepciones'] = $this->Documento_model->obtenerPercepciones($id);
        $data['retenciones'] = $this->Documento_model->obtener_retenciones($id);
        $data['factura'] = $this->Documento_model->get_documento($id);
        $data['_view'] =  'documento/factura_detalle' ;
        $data['js_to_load'] = 'modal.js';
        $this->load->view('layouts/main', $data);
        
    }
    
    function validar_codigo($idproveedor,$codigo)
    {
        $codigo_exists = $this->Documento_model->codigo_exists($codigo,$idproveedor);
        header('Content-Type: application/json');
        if($codigo_exists)
        {
            die( json_encode(array('status' => 'success', 'codigo' => 'error','mensaje' => 'codigo ya existente')) );
        }
        else
        {
            die( json_encode(array('status' => 'success', 'codigo' => 'ok','mensaje' => 'ok')));
        }
        
    }
    
    function validar_codigo_remito($idproveedor,$codigo)
    {
        $codigo_exists = $this->Documento_model->codigo_exists_remito($codigo,$idproveedor);
        header('Content-Type: application/json');
        if($codigo_exists)
        {
            die( json_encode(array('status' => 'success', 'codigo' => 'error','mensaje' => 'codigo ya existente')) );
        }
        else
        {
            die( json_encode(array('status' => 'success', 'codigo' => 'ok','mensaje' => 'ok')));
        }
        
    }
    
//    function prueba()
//    {
//        $data['_view'] = 'prueba';
//        $data['js_to_load'] = ['modal.js','prueba.js'];
//        $this->load->view('layouts/main',$data);
//    }
    /*
     * Listing of documentos
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('documento/index?');
        $config['total_rows'] = $this->Documento_model->get_all_documentos_count();
        $this->pagination->initialize($config);

        $data['documentos'] = $this->Documento_model->get_all_documentos($params);
        
        $data['_view'] = 'documento/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new documento
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('proveedor_cuenta_id1','Proveedor Cuenta Id1','required');
		$this->form_validation->set_rules('tipo','Tipo','required');
		$this->form_validation->set_rules('codigo','Codigo','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'tipo' => $this->input->post('tipo'),
				'proveedor_cuenta_id1' => $this->input->post('proveedor_cuenta_id1'),
				'codigo' => $this->input->post('codigo'),
				'monto_neto' => $this->input->post('monto_neto'),
				'monto_total' => $this->input->post('monto_total'),
				'fecha_carga' => $this->input->post('fecha_carga'),
				'fecha_modif' => $this->input->post('fecha_modif'),
                                'tipo_documento' => $this->input->post('tipo_documento')
            );
            
            $documento_id = $this->Documento_model->add_documento($params);
            redirect('documento/index');
        }
        else
        {
			$this->load->model('Proveedor_cuentum_model');
			$data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();
            
            $data['_view'] = 'documento/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a documento
     */
    function edit($id)
    {   
        // check if the documento exists before trying to edit it
        $data['documento'] = $this->Documento_model->get_documento($id);
        
        if(isset($data['documento']['id']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('proveedor_cuenta_id1','Proveedor Cuenta Id1','required');
            $this->form_validation->set_rules('tipo','Tipo','required');
            $this->form_validation->set_rules('codigo','Codigo','required');
            if($this->form_validation->run())     
            {   
                $params = array(
					'tipo' => $this->input->post('tipo'),
					'proveedor_cuenta_id1' => $this->input->post('proveedor_cuenta_id1'),
					'codigo' => $this->input->post('codigo'),
					'monto_neto' => $this->input->post('monto_neto'),
					'monto_total' => $this->input->post('monto_total'),
					'fecha_carga' => $this->input->post('fecha_carga'),
					'fecha_modif' => $this->input->post('fecha_modif'),
                );

                $this->Documento_model->update_documento($id,$params);            
                redirect('documento/index');
            }
            else
            {
				$this->load->model('Proveedor_cuentum_model');
				$data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();

                $data['_view'] = 'documento/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The documento you are trying to edit does not exist.');
    } 

    /*
     * Deleting documento
     */
    function remove($id)
    {
        $documento = $this->Documento_model->get_documento($id);

        // check if the documento exists before trying to delete it
        if(isset($documento['id']))
        {
            $this->Documento_model->delete_documento($id);
            redirect('documento/index');
        }
        else
            show_error('The documento you are trying to delete does not exist.');
    }
        
    /*
     * Nueva factura
     */
    function add_factura($id_proveedor=-1)
    {   
        if($id_proveedor<0)
        {
            redirect('proveedor/seleccion_proveedor/F');
        }
        
        /*
         * Obtener el id de la cuenta de facturas del proveedor 
         * si no existe crear
         */
        
        $this->load->model('Proveedor_cuentum_model');
        $this->load->model('Documento_iva_model');
        $this->load->model('Documento_percepcion_model');
        $this->load->helper('date_helper');
        $this->load->library('session');
        $data['proveedor'] = $this->Proveedor_model->get_proveedor($id_proveedor);
        $data['documento']['tipo'] = 'FACTURA';

        $rows_ids = $this->Proveedor_cuentum_model->ObtenerCuenta('FACTURA',$id_proveedor);
        $id_proveedor_cuenta = $rows_ids['id'];
        $data['id_proveedor']=$id_proveedor;

        if(null == $id_proveedor_cuenta)
        {
            $id_proveedor_cuenta = $this->Proveedor_cuentum_model->CrearCuenta('FACTURA',$id_proveedor);
        }

             
        $this->load->library('form_validation');

        //$this->form_validation->set_rules('proveedor_cuenta_id1','Proveedor Cuenta Id1','required');
        //$this->form_validation->set_rules('tipo','Tipo','required');
        $this->form_validation->set_rules('codigo','Codigo','required');

        if(
                $this->form_validation->run())     
        {   
            
            $params = array(
				'tipo' => 'FACTURA',
				'proveedor_cuenta_id1' => $id_proveedor_cuenta,
				'codigo' => $this->input->post('codigo'),
				//'monto_neto' => $this->input->post('monto_neto'),
				'monto_total' => $this->input->post('monto_total'),
				'impuestos_internos' => $this->input->post('_imp_internos'),
				'conceptos_no_gravados' => $this->input->post('_c_no_gravados'),
                                'fecha_carga' => parse_date($this->input->post('fecha')),
                                'tipo_documento' => $this->input->post('tipo_documento'),
                                'pto_vta'=> $this->input->post('pto_vta'),
                                'periodo' => parse_date("01/".$this->input->post('periodo')),
                                'fkProveedor' => $id_proveedor
            );

            $documento_id = $this->Documento_model->add_documento($params);

            $iva_monto = $this->input->post('iva_monto');
            $iva_porcentaje = $this->input->post('iva_porcentaje');
            $iva_monto_neto = $this->input->post('iva_monto_neto');
            
            if(is_array($iva_porcentaje))
            {
                //IVA
                for($i=0; $i<sizeof($iva_porcentaje);$i++)
                {
                    $_params = array(
                        'documento_id'=>$documento_id,
                        'monto'=>$iva_monto[$i],
                        'porcentaje'=>$iva_porcentaje[$i],
                        'monto_neto'=>$iva_monto_neto[$i]
                        );
                    $this->Documento_iva_model->add_documento_iva($_params);
                }
            }
            
            
            //percepciones
            $percepcion_monto = $this->input->post('monto_percepcion');
            $percepcion_detalle = $this->input->post('detalle_percepcion');
            
            if(is_array($percepcion_detalle))
            {
                for($i=0; $i<sizeof($percepcion_monto);$i++)
                {
                    $_params = array(
                        'documento_id' => $documento_id,
                        'monto' => $percepcion_monto[$i],
                        'detalle' => $percepcion_detalle[$i]
                    );
                    $this->Documento_percepcion_model->add_documento_percepcion($_params);
                }
            }
            //RETENCIONES
            $retencion_monto = $this->input->post('monto_retencion');
            $retencion_detalle = $this->input->post('detalle_retencion');
            if(is_array($retencion_monto))
            {
                for($i=0; $i<sizeof($retencion_monto);$i++)
                {
                    $_params = array(
                        'fkdocumento' => $documento_id,
                        'monto' => $retencion_monto[$i],
                        'detalle' => $retencion_detalle[$i]
                    );
                    $this->Documento_model->add_documento_retencion($_params);
                }

                
            }
            
            $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'FACTURA_ADD',
                    '-',
                    $documento_id
                    );
            
            redirect('proveedor/details/'.$id_proveedor);
        }
        else
        {
            $this->load->model('Proveedor_cuentum_model');
            $data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();


//            $data['child_data'] = array(
//                '_view'=>'documento/factura_add',
//                'js_to_load'=>'factura_add.js'
//                );
            $data['_view'] = 'documento/factura_add';
            $data['js_to_load'] = ['modal.js','factura_add.js'];
            
            $this->load->view('layouts/main',$data);
        }
    }     
    
    /*
    * Nuevo Remito
    */
    function add_remito($id_proveedor=-1)
    {   
        if($id_proveedor<0)
        {
            redirect('proveedor/seleccion_proveedor/R');
        }
        
        $this->load->model('Proveedor_cuentum_model');
        $this->load->model('Documento_iva_model');
        $this->load->helper('date_helper');
        $this->load->library('session');
        $data['documento']['tipo'] = 'REMITO';
        $data['proveedor'] = $this->Proveedor_model->get_proveedor($id_proveedor);
        $rows_ids = $this->Proveedor_cuentum_model->ObtenerCuenta('REMITO',$id_proveedor);
        $id_proveedor_cuenta = $rows_ids['id'];
        $data['id_proveedor']=$id_proveedor;

        if(null == $id_proveedor_cuenta)
        {
            $id_proveedor_cuenta = $this->Proveedor_cuentum_model->CrearCuenta('REMITO',$id_proveedor);
        }

        
        $this->load->library('form_validation');

        $this->form_validation->set_rules('codigo','Codigo','required');
        $this->form_validation->set_rules('fecha','fecha','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'tipo' => 'REMITO',
				'proveedor_cuenta_id1' => $id_proveedor_cuenta,
				'codigo' => $this->input->post('codigo'),

				'monto_total' => $this->input->post('monto_total'),
                                'fecha_carga' => parse_date($this->input->post('fecha')),
                'fkProveedor' => $id_proveedor

            );
            
            $documento_id = $this->Documento_model->add_documento($params);
              $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'REMITO_ADD',
                    '-',
                    $documento_id
                    );
            redirect('proveedor/details/'.$id_proveedor);
        }
        else
        {
			$this->load->model('Proveedor_cuentum_model');
			$data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();
            
            $data['_view'] = 'documento/remito_add';
            $data['js_to_load'] = ['modal.js','remito_add.js'];
            $this->load->view('layouts/main',$data);
        }
    }
    /*
     * Edit Factura
     */
    function edit_factura($id)
    {   
        $this->load->model('Documento_percepcion_model');
        $this->load->model('Documento_iva_model');
        $this->load->helper('date_helper');
        $this->load->library('session');
        // check if the documento exists before trying to edit it
        $data['factura'] = $this->Documento_model->get_documento($id);
        
        
        if (isset($data['factura']['id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('codigo', 'Codigo', 'required');
            //$this->form_validation->set_rules('fecha', 'Fecha', 'required');
            
            if ($this->form_validation->run()) {
                
                $params = array(
                    'codigo' => $this->input->post('codigo'),
                    //'monto_neto' => $this->input->post('monto_neto'),
                    'monto_total' => $this->input->post('monto_total'),
                    'impuestos_internos' => $this->input->post('_imp_internos'),
                    'conceptos_no_gravados' => $this->input->post('_c_no_gravados'),
                    'fecha_carga' => parse_date($this->input->post('fecha')),
                    'tipo_documento' => $this->input->post('tipo_documento'),
                    'pto_vta'=> $this->input->post('pto_vta'),
                    'periodo' => parse_date("01/".$this->input->post('periodo'))
                );
                
                $this->Documento_model->update_documento($id, $params);
                //eliminar percepciones e iva
                
                $this->Documento_model->eliminarPercepciones($id);
                $this->Documento_model->eliminarIVAS($id);
                $this->Documento_model->eliminarRetenciones($id);
                
                //guardar nuevas filas
                
                //iva
                
                $iva_monto = $this->input->post('iva_monto');
                $iva_porcentaje = $this->input->post('iva_porcentaje');
                $iva_monto_neto = $this->input->post('iva_monto_neto');
                
                for($i=0; $i<sizeof($iva_porcentaje);$i++)
                {
                    $_params = array(
                        'documento_id'=>$id,
                        'monto'=>$iva_monto[$i],
                        'porcentaje'=>$iva_porcentaje[$i],
                        'monto_neto'=>$iva_monto_neto[$i]
                        );
                    $this->Documento_iva_model->add_documento_iva($_params);
                }
            
                //percepciones
                $percepcion_monto = $this->input->post('monto_percepcion');
                $percepcion_detalle = $this->input->post('detalle_percepcion');
                
                for($i=0; $i<sizeof($percepcion_monto);$i++)
                {
                    $_params = array(
                        'documento_id' => $id,
                        'monto' => $percepcion_monto[$i],
                        'detalle' => $percepcion_detalle[$i]
                    );
                    $this->Documento_percepcion_model->add_documento_percepcion($_params);
                }
                
                //RETENCIONES
                $retencion_monto = $this->input->post('monto_retencion');
                $retencion_detalle = $this->input->post('detalle_retencion');
                if(is_array($retencion_monto))
                {
                    for($i=0; $i<sizeof($retencion_monto);$i++)
                    {
                        $_params = array(
                            'fkdocumento' => $id,
                            'monto' => $retencion_monto[$i],
                            'detalle' => $retencion_detalle[$i]
                        );
                        $this->Documento_model->add_documento_retencion($_params);
                    }


                }
                
                $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'FACTURA_EDIT',
                    '-',
                    $id
                    );
                
                
                redirect('documento/detalle_factura/'.$id);
            } else {
                $data['ivas'] = $this->Documento_model->obtenerMontosIVA($id);
                $data['percepciones'] = $this->Documento_model->obtenerPercepciones($id);
                $data['retenciones'] = $this->Documento_model->obtener_retenciones($id);
                $this->load->model('Proveedor_cuentum_model');
                $data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();

                $data['_view'] = 'documento/factura_edit';
                $data['js_to_load'] = 'factura_add.js';
                $this->load->view('layouts/main', $data);
            }
        } else {
            show_error('The documento you are trying to edit does not exist.');
        }
    } 
    
   /*
    * Edit Remito
    */
    function edit_remito($id)
    {   
        // check if the documento exists before trying to edit it
        $data['documento'] = $this->Documento_model->get_documento($id);
        
        $this->load->library('session');
        if(isset($data['documento']['id']))
        {
            $this->load->library('form_validation');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'tipo' => $this->input->post('tipo'),
					'proveedor_cuenta_id1' => $this->input->post('proveedor_cuenta_id1'),
					'codigo' => $this->input->post('codigo'),
					'monto_neto' => $this->input->post('monto_neto'),
					'monto_total' => $this->input->post('monto_total'),

                );

                $this->Documento_model->update_documento($id,$params); 
                $this->Historial_accion_model->registrar_evento(
                    $this->session->userdata('id_usuario'),
                    'REMITO_EDIT',
                    '-',
                    $id
                    );
                redirect('documento/index');
            }
            else
            {
				$this->load->model('Proveedor_cuentum_model');
				$data['all_proveedor_cuenta'] = $this->Proveedor_cuentum_model->get_all_proveedor_cuenta();

                $data['_view'] = 'documento/remito_edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The documento you are trying to edit does not exist.');
    } 
    
    /*
     * Index Facturas
     */
    
    function index_facturas($proveedor_id)
    {
        //$config['proveedor_id'] = $proveedor_id; 
        $params['limit'] = 5;//RECORDS_PER_PAGE; 
        $params['offset'] = 0;//($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('documento/index_facturas/'.$proveedor_id.'?');
        $config['total_rows'] = $this->Documento_model->get_all_factura_prov_count($proveedor_id);
        $this->pagination->initialize($config);

        $data['documentos'] = $this->Documento_model->get_all_documentos_b($params,'FACTURA',$proveedor_id);
        
        $data['id_proveedor'] =$proveedor_id;
        $data['_view'] = 'documento/factura_list';
        $this->load->view('layouts/main',$data);
    }
    
        /*
     * Index Facturas
     */
    
    function index_facturas_gral()
    {
        //$config['proveedor_id'] = $proveedor_id; 
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('documento/index_facturas_gral?');
        $config['total_rows'] = $this->Documento_model->get_all_factura_count();
        $this->pagination->initialize($config);

        $data['documentos'] = $this->Documento_model->get_all_documentos($params);
        
        $data['_view'] = 'documento/factura_list';
        $this->load->view('layouts/main',$data);
    }
        function index_remitos_gral()
    {
        //$config['proveedor_id'] = $proveedor_id; 
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('documento/index_remitos_gral?');
        $config['total_rows'] = $this->Documento_model->get_all_remito_count();
        $this->pagination->initialize($config);

        $data['documentos'] = $this->Documento_model->get_all_documentos($params,'REMITO');
        
        $data['_view'] = 'documento/remito_list';
        $this->load->view('layouts/main',$data);
    }
    
    /*
     * Index Remitos
     */
    function index_remitos($proveedor_id)
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        $data['id_proveedor'] =$proveedor_id;
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('documento/index_remitos/'.$proveedor_id.'?');
        $config['total_rows'] = $this->Documento_model->get_all_factura_prov_count($proveedor_id);
        $this->pagination->initialize($config);

        $data['documentos'] = $this->Documento_model->get_all_documentos($params,'REMITO',$proveedor_id);
        
        $data['_view'] = 'documento/remito_list';
        $this->load->view('layouts/main',$data);
    }
}
