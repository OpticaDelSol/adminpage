<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Documento_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    function obtener_dtovta($id)
    {
        return $this->db->query("select * from documento_venta dv where dv.fk_documento = ".$id.";")->result_array();
    }
    
    function add_carga_inicial($params)
    {
        $this->db->insert('carga_manual',$params);
        return $this->db->insert_id();
    }


    function obtener_documento_venta($id)
    {
        return $this->db->query("select
                    date_format(d.fecha_carga,'%d/%m/%Y') as 'fecha_formated',
                    d.id as 'dto_id',
                    d.tipo,
                    d.codigo,
                    d.monto_neto,
                    d.monto_total,
                    d.fecha_carga,
                    d.fecha_alta ,
                    d.fecha_modif, 
                    d.proveedor_cuenta_id1,
                    d.anulado,
                    d.conceptos_no_gravados, 
                    d.impuestos_internos, 
                    d.saldo_inicial,
                    d.tipo_documento,
                    d.pto_vta,
                    dv.id as 'id_dv',
                    dv.tipo_comprobante,
                    dv.razon_social_nombre,
                    dv.cuit_dni,
                    dv.fk_sucursal,
                    if(s.id is null,'',s.alias) as 'sucursal',
                    if(iva.id is null,0,iva.monto) as 'iva'
                     from documento d left join documento_iva iva on (iva.documento_id = d.id),
                     documento_venta dv left join sucursal s on (dv.fk_sucursal = s.id)
                     where dv.fk_documento = d.id and dv.id=".$id.";")->row_array();
    }
    	
    function obtener_informe_iva_ventas($mes,$anio)
    {
        return $this->db->query(
                        "select 
                                s.alias,
                                d.tipo,
                                d.pto_vta,
                                dv.tipo_comprobante,
                                     d.fecha_carga,
                                     d.codigo,
                                     dv.razon_social_nombre,
                                     dv.cuit_dni,
                                     d.monto_neto,
                                     if(di.id is null,0,di.monto) as 'IVA_21',
                                     d.monto_total,
                                     0 as 'iva_resp_no_insc',
                                     0 as 'exento'
                            from 
                                documento_venta dv, 
                                sucursal s,
                                documento d left join documento_iva di on di.documento_id = d.id
                            where 
                            (
                                    d.tipo = 'T' or
                                    d.tipo = 'F' or
                                    d.tipo = 'NC' or
                                    d.tipo = 'ND' 
                            )
                                and dv.fk_documento = d.id
                                and s.id = dv.fk_sucursal
                                and year(d.fecha_carga) = ".$anio." 
                                and month(d.fecha_carga) = ".$mes."
                            order by dv.fk_sucursal, d.tipo, d.fecha_carga;")->result_array();
    }
    
    function obtener_informe_iva_periodo($mes,$anio)
    {
        return $this->db->query("
            select 
                d.id,
                p.cuit,
                p.nombre,
                d.monto_neto,
                date_format(d.fecha_carga,'%d/%m/%Y') as 'fecha_carga',
                d.tipo_documento,
                d.tipo,
                d.codigo,
                d.pto_vta,
                if(iva21.id is null,0,iva21.monto_neto) as 'IVA_21_NETO',
                if(iva10.id is null,0,iva10.monto_neto) as 'IVA_10_5_NETO',
                if(iva27.id is null,0,iva27.monto_neto) as 'IVA_27_NETO',
                if(iva2_5.id is null,0,iva2_5.monto_neto) as 'IVA_2_5_NETO',
                if(iva21.id is null,0,iva21.monto) as 'IVA_21',
                if(iva10.id is null,0,iva10.monto) as 'IVA_10_5',
                if(iva27.id is null,0,iva27.monto) as 'IVA_27',
                if(iva2_5.id is null,0,iva2_5.monto) as 'IVA_2_5',
                d.conceptos_no_gravados as 'conceptos_no_gravados',
                d.impuestos_internos as 'impuestos_internos',
                if(dr_iva.id is null, 0, dr_iva.monto) as 'RETENCIONES_IVA',
                if(dr_gcias.id is null, 0, dr_gcias.monto) as 'RETENCIONES_GCIAS',
                if(dp.id is null, 0, dp.monto) as 'PERCEPCIONES',
                (
                if(iva21.id is null,0,iva21.monto_neto)+
                if(iva10.id is null,0,iva10.monto_neto)+
                if(iva27.id is null,0,iva27.monto_neto)+
                if(iva2_5.id is null,0,iva2_5.monto_neto)+
                if(iva21.id is null,0,iva21.monto)+
                if(iva10.id is null,0,iva10.monto)+
                if(iva27.id is null,0,iva27.monto)+
                if(iva2_5.id is null,0,iva2_5.monto)+
                d.conceptos_no_gravados+
                d.impuestos_internos+
                if(dr_iva.id is null, 0, dr_iva.monto)+
                if(dp.id is null, 0, dp.monto)
                ) as 'TOTAL'
                
                from documento d
                left join documento_iva iva21 on (iva21.porcentaje = 21 and iva21.documento_id = d.id)
                left join documento_iva iva10 on (iva10.porcentaje = 10.5 and iva10.documento_id = d.id)
                left join documento_iva iva27 on (iva27.porcentaje = 27 and iva27.documento_id = d.id)
                left join documento_iva iva2_5 on (iva2_5.porcentaje = 2.5 and iva2_5.documento_id = d.id)
                left join documento_retencion dr_iva on (dr_iva.fkdocumento = d.id and dr_iva.detalle='RETENCIONES_IVA')
                left join documento_retencion dr_gcias on (dr_gcias.fkdocumento = d.id and dr_gcias.detalle='RETENCIONES_GANANCIAS')
                left join documento_percepcion dp on (dp.documento_id = d.id),
                proveedor_cuenta pc, 
                proveedor p 
                where
                month(d.periodo) = ".$mes." and
                year(d.periodo) = ".$anio." and
                pc.proveedor_id = p.id and
                d.proveedor_cuenta_id1 = pc.id and
                d.tipo = 'FACTURA' and 
                d.anulado=0;")->result_array();
    }
    function obtener_informe_iva($dia,$mes,$anio,$diah,$mesh,$anioh)
    {
        return $this->db->query("
            select 
                d.id,
                p.cuit,
                p.nombre,
                d.monto_neto,
                date_format(d.fecha_carga,'%d/%m/%Y') as 'fecha_carga',
                d.tipo_documento,
                d.tipo,
                d.codigo,
                d.pto_vta,
                if(iva21.id is null,0,iva21.monto_neto) as 'IVA_21_NETO',
                if(iva10.id is null,0,iva10.monto_neto) as 'IVA_10_5_NETO',
                if(iva27.id is null,0,iva27.monto_neto) as 'IVA_27_NETO',
                if(iva2_5.id is null,0,iva2_5.monto_neto) as 'IVA_2_5_NETO',
                if(iva21.id is null,0,iva21.monto) as 'IVA_21',
                if(iva10.id is null,0,iva10.monto) as 'IVA_10_5',
                if(iva27.id is null,0,iva27.monto) as 'IVA_27',
                if(iva2_5.id is null,0,iva2_5.monto) as 'IVA_2_5',
                d.conceptos_no_gravados as 'conceptos_no_gravados',
                d.impuestos_internos as 'impuestos_internos',
                if(dr_iva.id is null, 0, dr_iva.monto) as 'RETENCIONES_IVA',
                if(dr_gcias.id is null, 0, dr_gcias.monto) as 'RETENCIONES_GCIAS',
                if(dp.id is null, 0, dp.monto) as 'PERCEPCIONES',
                (
                if(iva21.id is null,0,iva21.monto_neto)+
                if(iva10.id is null,0,iva10.monto_neto)+
                if(iva27.id is null,0,iva27.monto_neto)+
                if(iva2_5.id is null,0,iva2_5.monto_neto)+
                if(iva21.id is null,0,iva21.monto)+
                if(iva10.id is null,0,iva10.monto)+
                if(iva27.id is null,0,iva27.monto)+
                if(iva2_5.id is null,0,iva2_5.monto)+
                d.conceptos_no_gravados+
                d.impuestos_internos+
                if(dr_iva.id is null, 0, dr_iva.monto)+
                if(dp.id is null, 0, dp.monto)
                ) as 'TOTAL'
                
                from documento d
                left join documento_iva iva21 on (iva21.porcentaje = 21 and iva21.documento_id = d.id)
                left join documento_iva iva10 on (iva10.porcentaje = 10.5 and iva10.documento_id = d.id)
                left join documento_iva iva27 on (iva27.porcentaje = 27 and iva27.documento_id = d.id)
                left join documento_iva iva2_5 on (iva2_5.porcentaje = 2.5 and iva2_5.documento_id = d.id)
                left join documento_retencion dr_iva on (dr_iva.fkdocumento = d.id and dr_iva.detalle='RETENCIONES_IVA')
                left join documento_retencion dr_gcias on (dr_gcias.fkdocumento = d.id and dr_gcias.detalle='RETENCIONES_GANANCIAS')
                left join documento_percepcion dp on (dp.documento_id = d.id),
                proveedor_cuenta pc, 
                proveedor p 
                where
                date(d.fecha_carga) >= '".$anio."-".$mes."-".$dia."' and
                date(d.fecha_carga) <= '".$anioh."-".$mesh."-".$diah."'  and 
                pc.proveedor_id = p.id and
                d.proveedor_cuenta_id1 = pc.id and
                d.tipo = 'FACTURA' and 
                d.anulado=0;")->result_array();
    }
    
    function documento_venta_listado($tipo)
    {
        return $this->db->query("
            select 
                                dv.id,
                                d.id as 'dto_id',
                                d.anulado,
                                d.fecha_alta,
                                d.tipo_documento,
                                dv.tipo_comprobante,
                                dv.razon_social_nombre,
                                dv.cuit_dni,
                                d.pto_vta,
                                s.alias,
                                s.razon_soc,
                                d.monto_neto,
                                if(iva.id is null, '0', iva.monto) as 'iva',
                                d.monto_total
                                 from documento_venta dv,  sucursal s,
                                 documento d left join documento_iva iva on (d.id = iva.documento_id)
                                 where
                                d.id = dv.fk_documento and s.id = dv.fk_sucursal and tipo='".$tipo."' order by dv.id desc;"
                )->result_array();
    }
    
    
    function add_documento_retencion($params)
    {
        $this->db->insert('documento_retencion',$params);
        return $this->db->insert_id();
    }
    
    function codigo_exists_remito($codigo, $idproveedor)
    {
        $result = $this->db->query(
                "select d.id from documento d, proveedor_cuenta pc where d.codigo=".$codigo.
                " and d.proveedor_cuenta_id1=pc.id and pc.proveedor_id = ".$idproveedor.
                " and d.tipo='REMITO';")->result_array();
        return (sizeof($result)>0);
            
    }
    
    function codigo_exists($codigo, $idproveedor)
    {
        $result = $this->db->query(
                "select d.id from documento d, proveedor_cuenta pc where d.codigo=".$codigo.
                " and d.proveedor_cuenta_id1=pc.id and pc.proveedor_id = ".$idproveedor.
                " and d.tipo='FACTURA';")->result_array();
        return (sizeof($result)>0);
            
    }
    function obtener_retenciones($idDocumento)
    {
        return $this->db->query(
                "select dr.id, dr.fkdocumento, dr.monto, dr.detalle from documento_retencion dr where dr.fkdocumento="
                .$idDocumento.
                ";"
                )->result_array();
    }
    function eliminarRetenciones($idDocumento)
    {
        $this->db->query("delete from documento_retencion where documento_retencion.fkdocumento =".$idDocumento);
    }
    function eliminarPercepciones($idDocumento)
    {
        $this->db->query("delete from documento_percepcion where documento_percepcion.documento_id =".$idDocumento);
    }
    function eliminarIVAS($idDocumento)
    {
        $this->db->query("delete from documento_iva where documento_iva.documento_id = ".$idDocumento);
    }
    function obtenerMontosIVA($idDocumento)
    {
        return $this->db->query("select di.monto, di.monto_neto, di.porcentaje from documento_iva di where di.documento_id = ".$idDocumento.";")->result_array();
    }
    
    function obtenerPercepciones($idDocumento)
    {
        return $this->db->query("select dp.monto, dp.detalle from documento_percepcion dp where dp.documento_id = ".$idDocumento.";")->result_array();
    }
    
    function obtenerFacturas($limit_1,$limit_2)
    {
        return $this->db->query(
                "select 
                date_format(d.fecha_carga,'%d/%m/%y') as 'fecha',
                d.tipo_documento,
                d.pto_vta,
                p.nombre as 'proveedor',
                d.monto_total as 'monto',
                d.id
                 from documento d, proveedor p, proveedor_cuenta pc  where 
                d.tipo = 'FACTURA', p.id = pc.proveedor_id and 
                pc.id = d.proveedor_cuenta_id1 limit ".$limit_1.",".$limit_2." ;")->result_array();
    }
    
    /*
     * Get documento by id
     */
    function get_documento($id)
    {
       // return $this->db->get_where('documento',array('id'=>$id))->row_array();
        return $this->db->query("select 
            d.id, 
            d.pto_vta, 
            d.tipo_documento, 
            d.saldo_inicial, 
            d.impuestos_internos, 
            d.conceptos_no_gravados, 
            d.proveedor_cuenta_id1, 
            d.monto_total, 
            d.codigo, 
            d.anulado,
            date_format(d.periodo,'%m/%Y') as 'periodo',
            date_format(d.fecha_carga,'%d/%m/%Y') as 'fecha_carga' ,
            p.nombre as 'proveedor' from 
        documento d, proveedor_cuenta pc, proveedor p where
        d.proveedor_cuenta_id1 = pc.id and pc.proveedor_id =p.id and d.id = ".$id.";")
                ->row_array();
    }
    
    /*
     * Get all documentos count
     */
    function get_all_documentos_count()
    {
        $this->db->from('documento');
        return $this->db->count_all_results();
    }
    
    function get_all_factura_count()
    {
        $this->db->from('documento');
        $this->db->where('tipo','FACTURA');
        return $this->db->count_all_results();
    }
    
    function get_all_remito_count()
    {
        $this->db->from('documento');
        $this->db->where('tipo','REMITO');
        return $this->db->count_all_results();
    }
    
    /*
     * 
     */
    
    function get_all_factura_prov_count($idProveedor)
    {
        $this->db->from('documento');
        $this->db->where('tipo','FACTURA');
        $this->db->join('proveedor_cuenta','proveedor_cuenta.proveedor_id = '.$idProveedor.' and documento.proveedor_cuenta_id1 = proveedor_cuenta.id');
        return $this->db->count_all_results();
    }
    
    function get_all_remito_prov_count($idProveedor)
    {
        $this->db->from('documento');
        $this->db->where('tipo','REMITO');
        $this->db->join('proveedor_cuenta','proveedor_cuenta.proveedor_id = '.$idProveedor.' and documento.proveedor_cuenta_id1 = proveedor_cuenta.id');
        return $this->db->count_all_results();
    }
        
    /*
     * Get all documentos
     */
    function get_all_documentos($params = array(),$tipodoc='FACTURA',$idProveedor=-1)
    {
        //$this->db->select("")
        $this->db->order_by('documento.id', 'desc');
        $this->db->where('documento.tipo',$tipodoc);
        if($idProveedor>0)
        {
            $this->db->join('proveedor_cuenta','proveedor_cuenta.proveedor_id = '.$idProveedor.' and documento.proveedor_cuenta_id1 = proveedor_cuenta.id');
        }
        if(isset($params) && !empty($params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
        return $this->db->get('documento')->result_array();
    }
    
    function get_all_documentos_b($params = array(),$tipodoc='FACTURA',$idProveedor=null)
    {
        //$this->db->select("")
        
        return $this->db->query("select 
                            d.id, 
                            d.pto_vta, 
                            d.tipo_documento, 
                            d.saldo_inicial, 
                            d.impuestos_internos, 
                            d.conceptos_no_gravados, 
                            d.proveedor_cuenta_id1, 
                            d.monto_total, 
                            d.codigo, 
                            d.tipo,
                            date_format(d.fecha_carga,'%d/%m/%Y') as 'fecha_carga' 
                             from 
                            documento d, proveedor_cuenta pc where
                            d.proveedor_cuenta_id1 = pc.id and 
                            d.tipo='".$tipodoc."' and pc.proveedor_id =".$idProveedor." limit ".$params['offset'].",".$params['limit'].";")
                ->result_array();
        
        
//        $this->db->order_by('documento.id', 'desc');
//        $this->db->where('documento.tipo',$tipodoc);
//        if($idProveedor>0)
//        {
//            $this->db->join('proveedor_cuenta','proveedor_cuenta.proveedor_id = '.$idProveedor.' and documento.proveedor_cuenta_id1 = proveedor_cuenta.id');
//        }
//        if(isset($params) && !empty($params))
//        {
//            $this->db->limit($params['limit'], $params['offset']);
//        }
//        return $this->db->get('documento')->result_array();
    }
        
    /*
     * function to add new documento
     */
    function add_documento($params)
    {
        $this->db->insert('documento',$params);
        return $this->db->insert_id();
    }
    function add_documento_venta($params)
    {
        $this->db->insert('documento_venta',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update documento
     */
    function update_documento($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('documento',$params);
    }
    function update_documento_ventas($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('documento_venta',$params);
    }
    
    /*
     * function to delete documento
     */
    function delete_documento($id)
    {
        return $this->db->delete('documento',array('id'=>$id));
    }
}
